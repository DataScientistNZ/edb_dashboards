---
title: "EDB vegetation management analysis"
format: 
  dashboard:
    scrolling: true
    css: styles.css 
    # theme: lumen
    # theme: flatly
    nav-buttons:
    - text: Home
      icon: list
      href: https://datascientistnz.github.io/edb_dashboards/quarto_dashboards/
    - text: Code
      icon: github
      href: https://github.com/DataScientistNZ/edb_dashboards

editor: 
  markdown: 
    wrap: 72
    
fontsize: 13px
---
  
```{r, echo=F}

# round all numeric values to n digits (n=3 by default)
# we do so to allow a nice display
# makes a copy of the input data by default (use copy=F if undesired)
round_all_numeric_values <- function(dt, digits=3, copy=T) {
  if (copy) dt <- data.table(dt)
  for (nm in names(dt)) {
    if (is.numeric(dt[[nm]])) {
      dt[, (nm) := round(get(nm), digits)]
    }
  }
  dt
}

# custom made display of datatable
# displaying a copy of the table (copy made in the rounding function)
my_datatable <- function(dt, ..., digits=3) {
  DT::datatable(round_all_numeric_values(dt, digits=digits), ..., 
                extensions = 'Buttons', options = list(
                  dom = 'Bifrtp', buttons = c('copy', 'csv')))
}

```

# Introduction {scrolling="false"}

```{r, echo=F}

# load resources and set common variables
library(data.table)
library(ggplot2)
source(file.path(here::here(), "R", "00_adhoc_charts.R"))
options(scipen=999)

# load prepared data
dt <- fread(file.path(here::here(), "data", "generic_purpose_edb_data.csv"))

# define generic descriptors
latest_year <- max(dt$disc_yr)
overall_period <- paste0(min(dt$disc_yr), "-", latest_year)


# Add average of any metric per edb over period
time_ft <- "disc_yr"
qualitative_constant_ft <- c("edb", "status", "PAT_peergroup")
dt_edb_avg <- dt[, lapply(.SD, mean, na.rm = TRUE), by = qualitative_constant_ft, 
                 .SDcols = setdiff(names(dt), c(time_ft, qualitative_constant_ft))]

dt_edb_avg[, (time_ft) := overall_period]
setcolorder(dt_edb_avg, names(dt)) 

```

## documentation content

<h5>EDB Vegetation Management</h5>
  
This dashboard aims to explore Electricity Distribution Businesses' data with the objective of comparatively analyse performance, with a specific focus on vegetation management.

The dataset used in this dashboard is the one published by the Commerce Commission that involves ID data gathered from Electricity Distribution Businesses and covers the period `r overall_period`. The raw data can be found [here](https://comcom.govt.nz/regulated-industries/electricity-lines/electricity-distributor-performance-and-data/information-disclosed-by-electricity-distributors).

It uses the following data:

* line_length - total line length of the electrical network
* overhead_length - total overhead length of the electrical network
* nb_connections - number of connections of the network
* opex - total operational expenditures
* vege_mgt_opex - operational expenditures dedicated to vegetation management operations
* veg_saidi - the average duration of planned and unplanned interruptions for customers caused by vegetation
* veg_saifi - the average number of planned and unplanned interruptions for customers caused by vegetation

Let's note that above quantities, when in $, have been calculated in nominal terms. 

Results are often presented twice, once for `r latest_year`, once for the full period `r overall_period`. Metrics presented for the full period are averaged through the period. 

# Benchmarking

## section
<h5>Vegetation management cost benchmarking</h5>

The below presents all results for the vegetation management cost benchmarking, for `r latest_year` or for the full period (`r overall_period`) with a cost normalised using as denominator:

* line_length
* overhead_length

These insights have all been taken directly from the [PAT](https://public.tableau.com/app/profile/commerce.commission/viz/Performanceaccessibilitytool-NewZealandelectricitydistributors-Dataandmetrics/Homepage). To reproduce the below insights (or customise them!), click the link, go to the `Operating expenditure` tab, click on `Vegetation management` and select the appropriate denominator in the `Choose ratio` box.

To clarify, insights from the PAT are presented using the same groups as insights presented in this dashboard, but with different colours.   
From top to bottom:

* Dark green: Intermediate regional EDB
* Light brown: Large EDB with major city
* Salmon: Large EDB with secondary city
* Light blue: Medium Regional EDB
* Teal colour: Medium rural EDB
* Rust colour: Small rural EDB
* Dark Red: Small underground EDB

## section

### latest year {.tabset}

```{r, echo=F}
#| title: by line length [2024]
#| out-width: 50%

knitr::include_graphics(file.path(here::here(), "images", "vege_mgt_cost_by_line_length__2024.png"))

```

```{r, echo=F}
#| title: by overhead length [2024]
#| out-width: 50%

knitr::include_graphics(file.path(here::here(), "images", "vege_mgt_cost_by_overhead_length__2024.png"))

```


### overall period {.tabset}


```{r, echo=F}
#| title: by line length [2015-2024]
#| out-width: 50%

knitr::include_graphics(file.path(here::here(), "images", "vege_mgt_cost_by_line_length__2015-2024.png"))

```

```{r, echo=F}
#| title: by overhead length [2015-2024]
#| out-width: 50%
#| 
knitr::include_graphics(file.path(here::here(), "images", "vege_mgt_cost_by_overhead_length__2015-2024.png"))

```


# vs SAIFI

## section
<h5>Vegetation management opex vs Vegetation SAIFI</h5>

The below presents results for `r latest_year` or for the full period (`r overall_period`) with a cost normalised using as denominator:

* line_length
* overhead_length
* nb_connections
* icp50_line50

Some expectations have been expressed that higher expenses in vegetation management are could bring a lower SAIFI due to vegetation. That's not what is empirically observed in the data, which seems to show, if anything, a positive correlation between vegetation management expenditure and interruptions caused by vegetation.

## section

### latest year {.tabset}

```{r, echo=F}
#| title: per line_length

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", y_numerator="veg_mgt_opex", 
                 y_denominator="line_length", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year, x_log_scale=F)

```


```{r, echo=F}
#| title: per overhead_length

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year, x_log_scale=F)

```


```{r, echo=F}
#| title: per nb_connections

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", 
                 y_numerator="veg_mgt_opex", y_denominator="nb_connections", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year, x_log_scale=F)


```

```{r, echo=F}
#| title: per icp50_line50

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", 
                 y_numerator="veg_mgt_opex", y_denominator="icp50_line50", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year, x_log_scale=F)

```

### overall period {.tabset}

```{r, echo=F}
#| title: per line_length

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", 
                 y_numerator="veg_mgt_opex", y_denominator="line_length", 
                 groupby="PAT_peergroup", plot_disc_yr=overall_period, x_log_scale=F)

```

```{r, echo=F}
#| title: per overhead_length

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=overall_period, x_log_scale=F)

```

```{r, echo=F}
#| title: per nb_connections

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", 
                 y_numerator="veg_mgt_opex", y_denominator="nb_connections", 
                 groupby="PAT_peergroup", plot_disc_yr=overall_period, x_log_scale=F)


```

```{r, echo=F}
#| title: per icp50_line50

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", 
                 y_numerator="veg_mgt_opex", y_denominator="icp50_line50", 
                 groupby="PAT_peergroup", plot_disc_yr=overall_period, x_log_scale=F)

```


# vs SAIDI

## section
<h5>Vegetation management opex vs Vegetation SAIDI</h5>

The below presents results for `r latest_year` or for the full period (`r overall_period`) with a cost normalised using as denominator:

* overhead_length
* line_length
* nb_connections
* icp50_line50

Some expectations have been expressed that higher expenses in vegetation management are could bring a lower SAIDI due to vegetation. That's not what is empirically observed in the data, which seems to show, if anything, a positive correlation between vegetation management expenditure and interruptions caused by vegetation.

## section

### latest year {.tabset}


```{r, echo=F}
#| title: per overhead_length

my_scatter_gplot(data.table(dt)[veg_saidi < 1, veg_saidi := 1][], x_var="veg_saidi", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year)

```


```{r, echo=F}
#| title: per line_length

my_scatter_gplot(data.table(dt)[veg_saidi < 1, veg_saidi := 1][], x_var="veg_saidi", y_numerator="veg_mgt_opex", 
                 y_denominator="line_length", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year)

```

```{r, echo=F}
#| title: per nb_connections

my_scatter_gplot(data.table(dt)[veg_saidi < 1, veg_saidi := 1][], x_var="veg_saidi", y_numerator="veg_mgt_opex", y_denominator="nb_connections", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year)


```

```{r, echo=F}
#| title: per icp50_line50

my_scatter_gplot(data.table(dt)[veg_saidi < 1, veg_saidi := 1][], x_var="veg_saidi", y_numerator="veg_mgt_opex", y_denominator="icp50_line50", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year)

```

### overall period {.tabset}


```{r, echo=F}
#| title: per overhead_length

my_scatter_gplot(data.table(dt)[veg_saidi < 1, veg_saidi := 1][], x_var="veg_saidi", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=overall_period)

```


```{r, echo=F}
#| title: per line_length

my_scatter_gplot(data.table(dt)[veg_saidi < 1, veg_saidi := 1][], x_var="veg_saidi", 
                 y_numerator="veg_mgt_opex", y_denominator="line_length", 
                 groupby="PAT_peergroup", plot_disc_yr=overall_period)

```

```{r, echo=F}
#| title: per nb_connections

my_scatter_gplot(data.table(dt)[veg_saidi < 1, veg_saidi := 1][], x_var="veg_saidi", 
                 y_numerator="veg_mgt_opex", y_denominator="nb_connections", 
                 groupby="PAT_peergroup", plot_disc_yr=overall_period)


```

```{r, echo=F}
#| title: per icp50_line50

my_scatter_gplot(data.table(dt)[veg_saidi < 1, veg_saidi := 1][], x_var="veg_saidi", 
                 y_numerator="veg_mgt_opex", y_denominator="icp50_line50", 
                 groupby="PAT_peergroup", plot_disc_yr=overall_period)

```

# Quality quadrants

## section

The presumed cost vs quality trade-off can be displayed in terms of quadrants.
We arbitrarily split EDBs at the median value for both the cost and the quality, forming four quadrants:

* bottom left: low cost high reliability - presumed good value for consumers
* top right: high cost low reliability - presumed poor value for consumers 
* bottom right: low cost low reliability 
* top left: high cost high reliability

The cost vs quality trade-off is presented on the below for different normalisation of the vegetation management cost (by overhead length or by total line length) and for different definition of quality (saifi or saidi).

## section

### latest year {.tabset}

```{r, echo=F}
#| title: quadrant chart

x_var <- "veg_saifi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "overhead_length"

my_dt <- data.table(dt[disc_yr == latest_year])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup", x_log_scale=F) +
  labs(subtitle = latest_year) +
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") +
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black")
```


```{r, echo=F}
#| title: quadrant chart (log)

x_var <- "veg_saifi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "overhead_length"

my_dt <- data.table(dt[disc_yr == latest_year])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup") +
  labs(subtitle = latest_year) +
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") +
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black")
```


```{r, echo=F}
#| title: underlying data

my_dt[get(x_var) > x_median_val, x_cat := "low reliability"]
my_dt[get(x_var) <= x_median_val, x_cat := "high reliability"]
my_dt[get(y_numerator) / get(y_denominator) > y_median_val, y_cat := "high cost"]
my_dt[get(y_numerator) / get(y_denominator) <= y_median_val, y_cat := "low cost"]
my_dt[, quadrant := paste0(y_cat, " | ", x_cat)]
# my_datatable(my_dt[, c("edb", "quadrant"), with=F])

dt_wide <- dcast(my_dt, rowid(quadrant) ~ quadrant, value.var = "edb")
my_datatable(dt_wide[, -"quadrant", with=F])
```

### overall period {.tabset}
```{r, echo=F}
#| title: quadrant chart (log)

x_var <- "veg_saifi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "overhead_length"

my_dt <- data.table(dt_edb_avg[disc_yr == overall_period])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup", x_log_scale=F) +
  labs(subtitle = overall_period) + 
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") + 
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black") 
```

```{r, echo=F}
#| title: quadrant chart (log scale)

x_var <- "veg_saifi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "overhead_length"

my_dt <- data.table(dt_edb_avg[disc_yr == overall_period])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup") +
  labs(subtitle = overall_period) + 
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") + 
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black") 
```


```{r, echo=F}
#| title: underlying data

my_dt[get(x_var) > x_median_val, x_cat := "low reliability"]
my_dt[get(x_var) <= x_median_val, x_cat := "high reliability"]
my_dt[get(y_numerator) / get(y_denominator) > y_median_val, y_cat := "high cost"]
my_dt[get(y_numerator) / get(y_denominator) <= y_median_val, y_cat := "low cost"]
my_dt[, quadrant := paste0(y_cat, " | ", x_cat)]
# my_datatable(my_dt[, c("edb", "quadrant"), with=F])

dt_wide <- dcast(my_dt, rowid(quadrant) ~ quadrant, value.var = "edb")
my_datatable(dt_wide[, -"quadrant", with=F])

```


## section

### latest year {.tabset}

```{r, echo=F}
#| title: quadrant chart

x_var <- "veg_saifi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "line_length"

my_dt <- data.table(dt[disc_yr == latest_year])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup", x_log_scale=F) +
  labs(subtitle = latest_year) +
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") +
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black")
```


```{r, echo=F}
#| title: quadrant chart (log)

x_var <- "veg_saifi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "line_length"

my_dt <- data.table(dt[disc_yr == latest_year])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup") +
  labs(subtitle = latest_year) +
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") +
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black")
```


```{r, echo=F}
#| title: underlying data

my_dt[get(x_var) > x_median_val, x_cat := "low reliability"]
my_dt[get(x_var) <= x_median_val, x_cat := "high reliability"]
my_dt[get(y_numerator) / get(y_denominator) > y_median_val, y_cat := "high cost"]
my_dt[get(y_numerator) / get(y_denominator) <= y_median_val, y_cat := "low cost"]
my_dt[, quadrant := paste0(y_cat, " | ", x_cat)]
# my_datatable(my_dt[, c("edb", "quadrant"), with=F])

dt_wide <- dcast(my_dt, rowid(quadrant) ~ quadrant, value.var = "edb")
my_datatable(dt_wide[, -"quadrant", with=F])
```

### overall period {.tabset}
```{r, echo=F}
#| title: quadrant chart (log)

x_var <- "veg_saifi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "line_length"

my_dt <- data.table(dt_edb_avg[disc_yr == overall_period])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup", x_log_scale=F) +
  labs(subtitle = overall_period) + 
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") + 
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black") 
```

```{r, echo=F}
#| title: quadrant chart (log scale)

x_var <- "veg_saifi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "line_length"

my_dt <- data.table(dt_edb_avg[disc_yr == overall_period])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup") +
  labs(subtitle = overall_period) + 
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") + 
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black") 
```


```{r, echo=F}
#| title: underlying data

my_dt[get(x_var) > x_median_val, x_cat := "low reliability"]
my_dt[get(x_var) <= x_median_val, x_cat := "high reliability"]
my_dt[get(y_numerator) / get(y_denominator) > y_median_val, y_cat := "high cost"]
my_dt[get(y_numerator) / get(y_denominator) <= y_median_val, y_cat := "low cost"]
my_dt[, quadrant := paste0(y_cat, " | ", x_cat)]
# my_datatable(my_dt[, c("edb", "quadrant"), with=F])

dt_wide <- dcast(my_dt, rowid(quadrant) ~ quadrant, value.var = "edb")
my_datatable(dt_wide[, -"quadrant", with=F])

```


## section

### latest year {.tabset}

```{r, echo=F}
#| title: quadrant chart

x_var <- "veg_saidi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "overhead_length"

my_dt <- data.table(dt[disc_yr == latest_year])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup", x_log_scale=F) +
  labs(subtitle = latest_year) +
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") +
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black")
```


```{r, echo=F}
#| title: quadrant chart (log)

x_var <- "veg_saidi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "overhead_length"

my_dt <- data.table(dt[disc_yr == latest_year])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup") +
  labs(subtitle = latest_year) +
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") +
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black")
```


```{r, echo=F}
#| title: underlying data

my_dt[get(x_var) > x_median_val, x_cat := "low reliability"]
my_dt[get(x_var) <= x_median_val, x_cat := "high reliability"]
my_dt[get(y_numerator) / get(y_denominator) > y_median_val, y_cat := "high cost"]
my_dt[get(y_numerator) / get(y_denominator) <= y_median_val, y_cat := "low cost"]
my_dt[, quadrant := paste0(y_cat, " | ", x_cat)]
# my_datatable(my_dt[, c("edb", "quadrant"), with=F])

dt_wide <- dcast(my_dt, rowid(quadrant) ~ quadrant, value.var = "edb")
my_datatable(dt_wide[, -"quadrant", with=F])
```

### overall period {.tabset}
```{r, echo=F}
#| title: quadrant chart (log)

x_var <- "veg_saidi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "overhead_length"

my_dt <- data.table(dt_edb_avg[disc_yr == overall_period])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup", x_log_scale=F) +
  labs(subtitle = overall_period) + 
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") + 
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black") 
```

```{r, echo=F}
#| title: quadrant chart (log scale)

x_var <- "veg_saidi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "overhead_length"

my_dt <- data.table(dt_edb_avg[disc_yr == overall_period])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup") +
  labs(subtitle = overall_period) + 
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") + 
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black") 
```


```{r, echo=F}
#| title: underlying data

my_dt[get(x_var) > x_median_val, x_cat := "low reliability"]
my_dt[get(x_var) <= x_median_val, x_cat := "high reliability"]
my_dt[get(y_numerator) / get(y_denominator) > y_median_val, y_cat := "high cost"]
my_dt[get(y_numerator) / get(y_denominator) <= y_median_val, y_cat := "low cost"]
my_dt[, quadrant := paste0(y_cat, " | ", x_cat)]
# my_datatable(my_dt[, c("edb", "quadrant"), with=F])

dt_wide <- dcast(my_dt, rowid(quadrant) ~ quadrant, value.var = "edb")
my_datatable(dt_wide[, -"quadrant", with=F])

```

## section

### latest year {.tabset}

```{r, echo=F}
#| title: quadrant chart

x_var <- "veg_saidi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "line_length"

my_dt <- data.table(dt[disc_yr == latest_year])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup", x_log_scale=F) +
  labs(subtitle = latest_year) +
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") +
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black")
```


```{r, echo=F}
#| title: quadrant chart (log)

x_var <- "veg_saidi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "line_length"

my_dt <- data.table(dt[disc_yr == latest_year])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup") +
  labs(subtitle = latest_year) +
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") +
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black")
```


```{r, echo=F}
#| title: underlying data

my_dt[get(x_var) > x_median_val, x_cat := "low reliability"]
my_dt[get(x_var) <= x_median_val, x_cat := "high reliability"]
my_dt[get(y_numerator) / get(y_denominator) > y_median_val, y_cat := "high cost"]
my_dt[get(y_numerator) / get(y_denominator) <= y_median_val, y_cat := "low cost"]
my_dt[, quadrant := paste0(y_cat, " | ", x_cat)]
# my_datatable(my_dt[, c("edb", "quadrant"), with=F])

dt_wide <- dcast(my_dt, rowid(quadrant) ~ quadrant, value.var = "edb")
my_datatable(dt_wide[, -"quadrant", with=F])
```

### overall period {.tabset}
```{r, echo=F}
#| title: quadrant chart (log)

x_var <- "veg_saidi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "line_length"

my_dt <- data.table(dt_edb_avg[disc_yr == overall_period])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup", x_log_scale=F) +
  labs(subtitle = overall_period) + 
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") + 
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black") 
```

```{r, echo=F}
#| title: quadrant chart (log scale)

x_var <- "veg_saidi"
y_numerator <- "veg_mgt_opex"
y_denominator <- "line_length"

my_dt <- data.table(dt_edb_avg[disc_yr == overall_period])
my_dt[veg_saifi == 0, veg_saifi := 0.001]
my_dt[veg_saidi < 1, veg_saidi := 1]
x_median_val <- median(my_dt[[x_var]], na.rm = T)
y_median_val <- median(my_dt[[y_numerator]]/my_dt[[y_denominator]], na.rm = T)
my_simple_scatter_gplot(my_dt, x_var=x_var, y_numerator=y_numerator, 
                        y_denominator=y_denominator, groupby="PAT_peergroup") +
  labs(subtitle = overall_period) + 
  scale_y_continuous() +
  geom_vline(xintercept = x_median_val, linetype = "dashed", color = "black") + 
  geom_hline(yintercept = y_median_val, linetype = "dashed", color = "black") 
```


```{r, echo=F}
#| title: underlying data

my_dt[get(x_var) > x_median_val, x_cat := "low reliability"]
my_dt[get(x_var) <= x_median_val, x_cat := "high reliability"]
my_dt[get(y_numerator) / get(y_denominator) > y_median_val, y_cat := "high cost"]
my_dt[get(y_numerator) / get(y_denominator) <= y_median_val, y_cat := "low cost"]
my_dt[, quadrant := paste0(y_cat, " | ", x_cat)]
# my_datatable(my_dt[, c("edb", "quadrant"), with=F])

dt_wide <- dcast(my_dt, rowid(quadrant) ~ quadrant, value.var = "edb")
my_datatable(dt_wide[, -"quadrant", with=F])

```


# Causality Analysis [part 1]

## section

### left

<h4>More Vegetation expenses: less interruptions due to vegetation?</h4>

<br> 

Investing in vegetation management is generally expected to help EDBs reduce both SAIFI (outage frequency) and SAIDI (outage duration) by minimising tree-related faults. Clearing vegetation near power lines lowers the risk of disruptions, potentially improving network reliability and service continuity.

In this section we aim to explore this pattern closely:  
**More vegetation management expense → Better quality for consumers?**

In previous pages, we already explored this trade-off through high level scatter plots:
Once normalised by overhead, it's unclear that higher vegetation management expenses for EDBs typically lead to less interruptions (see Figure 1). One assumption one can make is the importance of the environment some EDBs operate in. A particularly challenging environment might naturally lead to both more expenses and more interruptions compared to peers, explaining the absence of overall observed pattern.

<br>

In order to understand and investigate the underlying pattern better, one can rephrase our underlying assumption as:  
<br>
**More vegetation management expense for a given EDB → Better quality for consumers down the line?**
<br>
It differs for 2 reasons:

- Emphasis on the situation for a given EDB to acknowledge impossibility to differentiate a potential poor efficiency from a challenging environment. 
- Possibility for the outcome to be observed down the line - in New Zealand EDBs tend to adopt 3 years vegetation management routine cycle. 

### right {width=50%}
```{r, echo=F}
#| title: Figure 1

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year, x_log_scale=F)

```


## section

```{r, echo=F}
dt_lags <- data.table(dt)
setorderv(dt_lags, c("edb", "disc_yr"), order=-1)
dt_lags[, `:=`(veg_saifi_next1 = lag(veg_saifi, 1),
              veg_saifi_next2 = lag(veg_saifi, 2), 
              veg_saifi_next3 = lag(veg_saifi, 3), 
              veg_saifi_next4 = lag(veg_saifi, 4)), by="edb"]
# should we remove late years (missing anyway for lagged variables to compare more fairly?)
# dt_lags <- dt_lags[disc_yr %in% sort(unique(dt$disc_yr))[1:(length(unique(dt$disc_yr))-4)]]
setorderv(dt_lags, c("edb", "disc_yr"), order=1)
dt_lags[, `:=`(veg_mgt_opex_lag1 = lag(veg_mgt_opex, 1),
              veg_mgt_opex_lag2 = lag(veg_mgt_opex, 2), 
              veg_mgt_opex_lag3 = lag(veg_mgt_opex, 3), 
              veg_mgt_opex_lag4 = lag(veg_mgt_opex, 4)), by="edb"]

# dt_lags[edb == "Aurora Energy"]

ft_nm <- "veg_saifi"
cor_res <- sapply(unique(dt_lags$edb), function(edb_nm) cor(
  dt_lags[edb==edb_nm]$`veg_mgt_opex`/dt_lags[edb==edb_nm]$`overhead_length`,
  dt_lags[edb==edb_nm][[ft_nm]], use = "pairwise.complete.obs"))
dt_cor <- data.table(edb=names(cor_res), my_ft_nm=cor_res)
setnames(dt_cor, "my_ft_nm", ft_nm)
for (ft_nm in c("veg_saifi_next1", "veg_saifi_next2", "veg_saifi_next3", "veg_saifi_next4")) {
  cor_res <- sapply(unique(dt_lags$edb), function(edb_nm) cor(
    dt_lags[edb==edb_nm]$`veg_mgt_opex`/dt_lags[edb==edb_nm]$`overhead_length`,
    dt_lags[edb==edb_nm][[ft_nm]], use = "pairwise.complete.obs"))
  dt_cor_tmp <- data.table(edb=names(cor_res), my_ft_nm=cor_res)
  setnames(dt_cor_tmp, "my_ft_nm", ft_nm)
  dt_cor <- merge(dt_cor, dt_cor_tmp)
  
}


```

### chart {width=50%}

```{r, echo=F}
#| title: Figure 2 - Correlation between vegetation cost and outcomes

dt_cor_long <- melt(dt_cor, id.vars = "edb", 
                    variable.name = "measure", 
                    value.name = "correlation")

# Reverse the order of edb
dt_cor_long$edb <- factor(dt_cor_long$edb, levels = rev(unique(dt_cor_long$edb)))
# dt_cor_long <- dt_cor_long[!is.na(correlation)] # rm invercargill as always 0 veg_saifi


ggplot(dt_cor_long, aes(measure, edb)) +
  geom_tile(aes(fill = correlation)) +
  geom_text(aes(label = round(correlation, 2))) +
  theme_minimal() +
  scale_fill_gradient2(low = "deepskyblue3", mid = "white", high = "brown2", midpoint = 0) + 
  ggtitle("Correlation between vegetation cost and outcomes")

```


### text

<h4>Simple Correlation Analysis</h4>

<br> 

**More vegetation management expense for a given EDB → Better quality for consumers down the line?**  

<br>

To explore this possibility, lagged signals have been created:  
- `veg_saifi_next<n>` designates the saifi of the year observed `<n>` years after the expense was made (`<n>` can take values from 1 to 4 in this analysis).

To clarify, for 2019 observations, it means that `veg_mgt_opex` represents the cost for the year 2019 and `veg_saifi_next2` represents the saifi caused by vegetation in 2021. Our data stopping in 2024, it means that `veg_saifi_next2` will only be filled until 2022 and compared to the expenses of that year, as outcomes after 2024 are not known yet. 

For each EDB, we want to answer the following: Is a higher expense (than usual) tied to a better quality (than usual) down the line?  
One simple way to attempt to observe such pattern is to compute the correlation, for each EDB, between the cost signal and the interruption signal. Such computations have been performed and are presented in Figure 2. One can observe:

* A negative correlation (in blue) shows that more expenses are associated with less interruptions
* A positive correlation (in red) shows that more expenses are associated with more interruptions

<br>

<h4>Disappointing results?</h4>

<br> 

Results are not as encouraging as one might expect. If such pattern (higher expense → better quality after n years) was consistently true for the industry for a given number of years n, we would expect to observe an entirely blue column.  
It can be noted that n=1 and n=2 appears to be slightly more blue than other columns - yet 13 values out of 28 are positive - the expected pattern does not look consistent/significant.

## section

### latest year {.tabset}

```{r, echo=F}
#| title: veg_saifi

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year, x_log_scale=F)

```

```{r, echo=F}
#| title: veg_saifi_next1

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next1 == 0, veg_saifi_next1 := 0.001][], x_var="veg_saifi_next1", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year-1, x_log_scale=F)

```

```{r, echo=F}
#| title: veg_saifi_next2

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next2 == 0, veg_saifi_next2 := 0.001][], x_var="veg_saifi_next2", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year-2, x_log_scale=F)
```

```{r, echo=F}
#| title: veg_saifi_next3

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next3 == 0, veg_saifi_next3 := 0.001][], x_var="veg_saifi_next3", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year-3, x_log_scale=F)

```

```{r, echo=F}
#| title: veg_saifi_next4

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next4 == 0, veg_saifi_next4 := 0.001][], x_var="veg_saifi_next4", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year-4, x_log_scale=F)

```

### 2016 {.tabset}

```{r, echo=F}
#| title: veg_saifi

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2016, x_log_scale=F)

```

```{r, echo=F}
#| title: veg_saifi_next1

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next1 == 0, veg_saifi_next1 := 0.001][], x_var="veg_saifi_next1", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2016, x_log_scale=F)

```

```{r, echo=F}
#| title: veg_saifi_next2

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next2 == 0, veg_saifi_next2 := 0.001][], x_var="veg_saifi_next2", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2016, x_log_scale=F)
```

```{r, echo=F}
#| title: veg_saifi_next3

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next3 == 0, veg_saifi_next3 := 0.001][], x_var="veg_saifi_next3", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2016, x_log_scale=F)

```

```{r, echo=F}
#| title: veg_saifi_next4

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next4 == 0, veg_saifi_next4 := 0.001][], x_var="veg_saifi_next4", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2016, x_log_scale=F)

```

## section 

### 2019 {.tabset}

```{r, echo=F}
#| title: veg_saifi

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2019, x_log_scale=F)

```

```{r, echo=F}
#| title: veg_saifi_next1

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next1 == 0, veg_saifi_next1 := 0.001][], x_var="veg_saifi_next1", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2019, x_log_scale=F)

```

```{r, echo=F}
#| title: veg_saifi_next2

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next2 == 0, veg_saifi_next2 := 0.001][], x_var="veg_saifi_next2", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2019, x_log_scale=F)
```

```{r, echo=F}
#| title: veg_saifi_next3

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next3 == 0, veg_saifi_next3 := 0.001][], x_var="veg_saifi_next3", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2019, x_log_scale=F)

```

```{r, echo=F}
#| title: veg_saifi_next4

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next4 == 0, veg_saifi_next4 := 0.001][], x_var="veg_saifi_next4", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2019, x_log_scale=F)

```

### 2022 {.tabset}

```{r, echo=F}
#| title: veg_saifi

my_scatter_gplot(data.table(dt)[veg_saifi == 0, veg_saifi := 0.001][], x_var="veg_saifi", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2022, x_log_scale=F)

```

```{r, echo=F}
#| title: veg_saifi_next1

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next1 == 0, veg_saifi_next1 := 0.001][], x_var="veg_saifi_next1", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2022, x_log_scale=F)

```

```{r, echo=F}
#| title: veg_saifi_next2

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next2 == 0, veg_saifi_next2 := 0.001][], x_var="veg_saifi_next2", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2022, x_log_scale=F)
```

```{r, echo=F}
#| title: veg_saifi_next3

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next3 == 0, veg_saifi_next3 := 0.001][], x_var="veg_saifi_next3", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2022, x_log_scale=F)

```

```{r, echo=F}
#| title: veg_saifi_next4

my_scatter_gplot(data.table(dt_lags)[veg_saifi_next4 == 0, veg_saifi_next4 := 0.001][], x_var="veg_saifi_next4", 
                 y_numerator="veg_mgt_opex", y_denominator="overhead_length", 
                 groupby="PAT_peergroup", plot_disc_yr=2022, x_log_scale=F)

```

# Causality Analysis [part 2]

## section 

<h5>Econometrics</h5>

**More vegetation management expense for a given EDB → Better quality for consumers down the line?**  

The correlation analysis gives us a basic look at the relationship between vegetation management spending and interruptions, but it doesn’t tell the full story.

To explore this further, we can use simple modelling techniques to help identify patterns and better understand how spending may impact reliability over time. While we can’t account for every possible factor, this approach allows us to examine whether higher investment in vegetation management is generally linked to fewer interruptions down the line.

In the next sections, we apply basic statistical methods to refine our understanding and gain deeper insights into the data.

## section

<hr style="height: 5px; background-color: black; border: none;">

## Section

<h5>"Log normalised cost - log vegetation saifi" results</h5>

results for models `ln(veg_mgt_opex/overhead_length) ~ ln(veg_saifi_next<n>) [+ edb]`

* without fixed effects on the left
* with fixed effects (for EDBs) on the right

## section

```{r, echo=F}

display_model <- function(m) {
  m_res <- data.table(broom::tidy(m))
  m_res[, significance := ifelse(p.value < 0.001, "***",
                          ifelse(p.value < 0.01, "**",
                                 ifelse(p.value < 0.05, "*", "")))]
  m_res <- m_res[, .(term, estimate, std.error, significance)]
  
  # # Compute model fit metrics
  # fit_metrics <- data.table(
  #   term = c("AIC", "BIC", "RMSE", "R²"),
  #   estimate = c(AIC(m), BIC(m), rmse(m, dt_lags), summary(m)$r.squared)
  # )
  # 
  # # Combine both tables
  # final_res <- rbind(m_res, fit_metrics, fill = TRUE)
  
  # this does not play nicely with estimatr::lm_robust
  # either we use robust estimate, or we use native computation of fit, not both....
  
  my_datatable(m_res)
}

```

### left {.tabset}

```{r, echo=F}
#| title: veg_saifi

my_reg_var <- "veg_saifi"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(log(", my_reg_var,"))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```


```{r, echo=F}
#| title: veg_saifi_next1

my_reg_var <- "veg_saifi_next1"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(log(", my_reg_var,"))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next2

my_reg_var <- "veg_saifi_next2"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(log(", my_reg_var,"))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next3

my_reg_var <- "veg_saifi_next3"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(log(", my_reg_var,"))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next4

my_reg_var <- "veg_saifi_next4"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(log(", my_reg_var,"))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

### right {.tabset}

```{r, echo=F}
#| title: veg_saifi

my_reg_var <- "veg_saifi"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(log(", my_reg_var,")) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```


```{r, echo=F}
#| title: veg_saifi_next1

my_reg_var <- "veg_saifi_next1"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(log(", my_reg_var,")) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next2

my_reg_var <- "veg_saifi_next2"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(log(", my_reg_var,")) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)
```

```{r, echo=F}
#| title: veg_saifi_next3

my_reg_var <- "veg_saifi_next3"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(log(", my_reg_var,")) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next4

my_reg_var <- "veg_saifi_next4"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(log(", my_reg_var,")) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

## section

<hr style="height: 5px; background-color: black; border: none;">

## Section

<h5>"log vegetation saifi - Log normalised cost" results</h5>

results for models `ln(veg_saifi) ~ ln(veg_mgt_opex_lag<n>/overhead_length)[+ edb]`

* without fixed effects on the left
* with fixed effects (for EDBs) on the right

## section

### left {.tabset}

```{r, echo=F}
#| title: veg_mgt_opex

my_reg_var <- "veg_mgt_opex"
m <- estimatr::lm_robust(as.formula(paste0("I(veg_saifi) ~ I(log(", my_reg_var,"/overhead_length))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```


```{r, echo=F}
#| title: veg_mgt_opex_lag1

my_reg_var <- "veg_mgt_opex_lag1"
m <- estimatr::lm_robust(as.formula(paste0("I(veg_saifi) ~ I(log(", my_reg_var,"/overhead_length))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0 & veg_saifi != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_mgt_opex_lag2

my_reg_var <- "veg_mgt_opex_lag2"
m <- estimatr::lm_robust(as.formula(paste0("I(veg_saifi) ~ I(log(", my_reg_var,"/overhead_length))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0 & veg_saifi != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_mgt_opex_lag3

my_reg_var <- "veg_mgt_opex_lag3"
m <- estimatr::lm_robust(as.formula(paste0("I(veg_saifi) ~ I(log(", my_reg_var,"/overhead_length))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0 & veg_saifi != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_mgt_opex_lag4

my_reg_var <- "veg_mgt_opex_lag4"
m <- estimatr::lm_robust(as.formula(paste0("I(veg_saifi) ~ I(log(", my_reg_var,"/overhead_length))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0 & veg_saifi != 0], se_type='HC0')
display_model(m)

```

### right {.tabset}

```{r, echo=F}
#| title: veg_mgt_opex

my_reg_var <- "veg_mgt_opex"
m <- estimatr::lm_robust(as.formula(paste0("I(veg_saifi) ~ I(log(", my_reg_var,"/overhead_length)) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```


```{r, echo=F}
#| title: veg_mgt_opex_lag1

my_reg_var <- "veg_mgt_opex_lag1"
m <- estimatr::lm_robust(as.formula(paste0("I(veg_saifi) ~ I(log(", my_reg_var,"/overhead_length)) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0 & veg_saifi != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_mgt_opex_lag2

my_reg_var <- "veg_mgt_opex_lag2"
m <- estimatr::lm_robust(as.formula(paste0("I(veg_saifi) ~ I(log(", my_reg_var,"/overhead_length)) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0 & veg_saifi != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_mgt_opex_lag3

my_reg_var <- "veg_mgt_opex_lag3"
m <- estimatr::lm_robust(as.formula(paste0("I(veg_saifi) ~ I(log(", my_reg_var,"/overhead_length)) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0 & veg_saifi != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_mgt_opex_lag4

my_reg_var <- "veg_mgt_opex_lag4"
m <- estimatr::lm_robust(as.formula(paste0("I(veg_saifi) ~ I(log(", my_reg_var,"/overhead_length)) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0 & veg_saifi != 0], se_type='HC0')
display_model(m)

```


## Section

<h5>"Log cost - log vegetation saifi" results</h5>

results for models `ln(veg_mgt_opex) ~ ln(veg_saifi_next<n>) + ln(overhead_length) [+ edb]`

* without fixed effects on the left
* with fixed effects (for EDBs) on the right

## section

```{r, echo=F}

display_model <- function(m) {
  m_res <- data.table(broom::tidy(m))
  m_res[, significance := ifelse(p.value < 0.001, "***",
                          ifelse(p.value < 0.01, "**",
                                 ifelse(p.value < 0.05, "*", "")))]
  m_res <- m_res[, .(term, estimate, std.error, significance)]
  m_res[, term := gsub("^I\\((.*)\\)$", "\\1", term)]
  my_datatable(m_res)
}

```

### left {.tabset}

```{r, echo=F}
#| title: veg_saifi

my_reg_var <- "veg_saifi"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex)) ~ I(log(", my_reg_var,")) + I(log(overhead_length))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```


```{r, echo=F}
#| title: veg_saifi_next1

my_reg_var <- "veg_saifi_next1"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex)) ~ I(log(", my_reg_var,")) + I(log(overhead_length))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next2

my_reg_var <- "veg_saifi_next2"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex)) ~ I(log(", my_reg_var,")) + I(log(overhead_length))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next3

my_reg_var <- "veg_saifi_next3"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex)) ~ I(log(", my_reg_var,")) + I(log(overhead_length))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next4

my_reg_var <- "veg_saifi_next4"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex)) ~ I(log(", my_reg_var,")) + I(log(overhead_length))")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

### right {.tabset}

```{r, echo=F}
#| title: veg_saifi

my_reg_var <- "veg_saifi"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex)) ~ I(log(", my_reg_var,")) + I(log(overhead_length)) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```


```{r, echo=F}
#| title: veg_saifi_next1

my_reg_var <- "veg_saifi_next1"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex)) ~ I(log(", my_reg_var,")) + I(log(overhead_length)) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next2

my_reg_var <- "veg_saifi_next2"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex)) ~ I(log(", my_reg_var,")) + I(log(overhead_length)) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)
```

```{r, echo=F}
#| title: veg_saifi_next3

my_reg_var <- "veg_saifi_next3"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex)) ~ I(log(", my_reg_var,")) + I(log(overhead_length)) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next4

my_reg_var <- "veg_saifi_next4"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex)) ~ I(log(", my_reg_var,")) + I(log(overhead_length)) + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

## section

<hr style="height: 5px; background-color: black; border: none;">

## section

<h5>"Log normalised cost - vegetation saifi" results</h5>

Results for models `ln(veg_mgt_opex/overhead_length) ~ veg_saifi_next<n> [+ edb]`

* without fixed effects on the left
* with fixed effects (for EDBs) on the right

## section

### left {.tabset}

```{r, echo=F}
#| title: veg_saifi

my_reg_var <- "veg_saifi"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(", my_reg_var,")")), 
                    data = dt_lags[veg_mgt_opex != 0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```


```{r, echo=F}
#| title: veg_saifi_next1

my_reg_var <- "veg_saifi_next1"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(", my_reg_var,")")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next2

my_reg_var <- "veg_saifi_next2"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(", my_reg_var,")")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next3

my_reg_var <- "veg_saifi_next3"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(", my_reg_var,")")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next4

my_reg_var <- "veg_saifi_next4"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(", my_reg_var,")")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

### right {.tabset}

```{r, echo=F}
#| title: veg_saifi

my_reg_var <- "veg_saifi"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(", my_reg_var,") + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```


```{r, echo=F}
#| title: veg_saifi_next1

my_reg_var <- "veg_saifi_next1"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(", my_reg_var,") + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next2

my_reg_var <- "veg_saifi_next2"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(", my_reg_var,") + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)
```

```{r, echo=F}
#| title: veg_saifi_next3

my_reg_var <- "veg_saifi_next3"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(", my_reg_var,") + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```

```{r, echo=F}
#| title: veg_saifi_next4

my_reg_var <- "veg_saifi_next4"
m <- estimatr::lm_robust(as.formula(paste0("I(log(veg_mgt_opex/overhead_length)) ~ I(", my_reg_var,") + edb")), 
                    data = dt_lags[veg_mgt_opex!=0 & (!is.na(get(my_reg_var))) &
                                    get(my_reg_var) != 0], se_type='HC0')
display_model(m)

```




