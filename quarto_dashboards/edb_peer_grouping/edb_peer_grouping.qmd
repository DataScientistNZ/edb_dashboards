---
title: "EDB Peer Grouping"
format: 
  dashboard:
    scrolling: true 
    # theme: lumen
    # theme: flatly
    nav-buttons:
    - text: Home
      icon: list
      href: https://datascientistnz.github.io/edb_dashboards/quarto_dashboards/edb_peer_grouping
    - text: Code
      icon: github
      href: https://github.com/DataScientistNZ/edb_dashboards

editor: 
  markdown: 
    wrap: 72
---
  
```{r, echo=F}

# round all numeric values to n digits (n=3 by default)
# we do so to allow a nice display
# makes a copy of the input data by default (use copy=F if undesired)
round_all_numeric_values <- function(dt, digits=3, copy=T) {
  if (copy) dt <- data.table(dt)
  for (nm in names(dt)) {
    if (is.numeric(dt[[nm]])) {
      dt[, (nm) := round(get(nm), digits)]
    }
  }
  dt
}

# custom made display of datatable
# displaying a copy of the table (copy made in the rounding function)
my_datatable <- function(dt, ..., digits=3) {
  DT::datatable(round_all_numeric_values(dt, digits=digits), ..., 
                extensions = 'Buttons', options = list(
                  dom = 'Bifrtp', buttons = c('copy', 'csv')))
}

```

# Introduction

## documentation content

<h5>EDB Peer Grouping</h5>
  

This dashboard aims to explore Electricity Distribution Businesses' data with the objective of facilitating the identification of natural peers.

The dataset used in this dashboard is the one published by the Commerce Commission that involves ID data gathered from Electricity Distribution Businesses. The raw data can be found [here](https://comcom.govt.nz/regulated-industries/electricity-lines/electricity-distributor-performance-and-data/information-disclosed-by-electricity-distributors).

It uses the following data:

* opex - total operational expenditures
* capex - total capital expenditures
* rab - opening Regulatory Asset Base
* depreciation
* line_length - total line length of the electrical network
* nb_connections - number of connections of the network
* flow_capital_services - means (rab + capex/2) * 5.6% + depreciation
* totex - means opex + capex
* totex_fcs - means opex + flow_capital_services
* density - means nb_connections / line_length 
* icp50_line50 - means nb_connections^0.5 * line_length^0.5 

Let's note that the above quantities, when in $, have been calculated in nominal terms. That's a simplified approach, as the definition of the flow of capital services implicitly refers to different inflation indices that have not been used in this study.

```{r, echo=F}

# load resources and set common variables
library(data.table)
library(ggplot2)
# source(file.path(here::here(), "R", "00_echarts.R"))
options(scipen=999)

# load prepared data
dt <- fread(file.path(here::here(), "data", "generic_purpose_edb_data.csv"))

# define generic descriptors
latest_year <- max(dt$disc_yr)
overall_period <- paste0(min(dt$disc_yr), "-", latest_year)

# define chart we'll keep using everywhere
my_scatter_gplot <- function(dt, x_var, y_numerator, y_denominator, groupby, plot_disc_yr) {
  dt_plot <- data.table(dt)[, `:=`(metric = get(y_numerator)/get(y_denominator), 
                                   x = get(x_var))][,  c("disc_yr", "edb", groupby,
                                                         "x", "metric"), with=F]
  dt_plot2 <- dt_plot[, .(x = mean(x), metric = mean(metric)), 
                      by=c("edb", groupby)][, disc_yr := overall_period]
  dt_plot <- rbind(dt_plot, dt_plot2)
  
  p <- ggplot(dt_plot[disc_yr == plot_disc_yr],
              aes(x = x, y = metric)) +
    geom_point(aes(color=get(groupby)), size=2, alpha=0.8) +
    theme_minimal() +
    ylab(paste0(y_numerator, " / ", y_denominator)) + 
    ylim(c(0, NA)) + 
    xlab(x_var) +
    ggrepel::geom_text_repel(aes(label=edb, color=get(groupby)), size=3, alpha=0.8, show.legend=FALSE) +
    # geom_smooth(method = "lm", se = FALSE, color = "black", alpha=0.1) +
    labs(title = "geom_text_repel()", alpha=0.8) +
    ggtitle(paste0(y_numerator, " / ", y_denominator, "   (", plot_disc_yr, ")")) +
    theme(legend.title = element_blank())
  if (!x_var %in% c("density")) p <- p + coord_trans(x='log10')
  p
}

```

# Opex

## section
<h5>Opex</h5>

The below presents all results, both for `r latest_year` or for the full period (`r overall_period`) with a cost normalised by using as denominator:

* nb_connections
* line_length
* icp50_line50


## section

### latest year {.tabset}

```{r, echo=F}
#| title: per nb_connections

# y_nominator <- "opex"
# y_denominator <- "nb_connections"
# y_denominator <- "icp50_line50"
# x_var <- "density"
# # x_var <- "nb_connections"
# # x_var <- "line_length"
# # x_var <- "icp50_line50"
# groupby <- "PAT_peergroup"
# 
# plot_disc_yr <- latest_year
# # plot_disc_yr <- overall_period

my_scatter_gplot(dt, x_var="density", y_numerator="opex", y_denominator="nb_connections", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year)


```

```{r, echo=F}
#| title: per line_length

my_scatter_gplot(dt, x_var="density", y_numerator="opex", y_denominator="line_length", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year)

```

```{r, echo=F}
#| title: per icp50_line50

my_scatter_gplot(dt, x_var="density", y_numerator="opex", y_denominator="icp50_line50", 
                 groupby="PAT_peergroup", plot_disc_yr=latest_year)

```

### overall period {.tabset}

```{r, echo=F}
#| title: per nb_connections

my_scatter_gplot(dt, x_var="density", y_numerator="opex", y_denominator="nb_connections", 
                 groupby="PAT_peergroup", plot_disc_yr=overall_period)


```

```{r, echo=F}
#| title: per line_length

my_scatter_gplot(dt, x_var="density", y_numerator="opex", y_denominator="line_length", 
                 groupby="PAT_peergroup", plot_disc_yr=overall_period)

```

```{r, echo=F}
#| title: per icp50_line50

my_scatter_gplot(dt, x_var="density", y_numerator="opex", y_denominator="icp50_line50", 
                 groupby="PAT_peergroup", plot_disc_yr=overall_period)

```







